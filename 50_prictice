建立数据：
-- --建表
-- --学生表
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
-- --课程表
CREATE TABLE `Course`(
`c_id` VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
-- --教师表
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
-- --成绩表
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id` VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);



-- 插入数据：
-- --插入学生表测试数据
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
-- --课程表测试数据
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');

-- --教师表测试数据
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');

-- --成绩表测试数据
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);

50道练习题：
1.查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号（重点）


select * from

(select s_id,c_id,s_score from score where c_id='01')as a
inner join 

(select s_id,c_id,s_score from score where c_id='02') as b

on a.s_id = b.s_id
where  a.s_score>b.s_score;


2、查询平均成绩大于60分的学生的学号和平均成绩（简单，第二道重点）


select s_id,avg(s_score) from score c GROUP BY s_id HAVING avg(s_score)>60;


3.查询所有学生的学号、姓名、选课数、总成绩（不重要）

select a.s_id,a.s_name,count(b.s_id),sum(b.s_score) from student as a  join score as b on a.s_id = b.s_id group by a.s_id;


4.查询姓“猴”的老师的个数（不重要）

select count(t_id) from teacher where t_name like "猴"


5.查询没学过“张三”老师课的学生的学号、姓名（重点）


select s_id,s_name from student  s where  s.s_id not in 
(select sc.s_id from score sc 
inner join 
course c on c.c_id = sc.c_id 
inner join
teacher as t on c.t_id=t.t_id 
where t.t_name='张三')

6、查询学过“张三”老师所教的所有课的同学的学号、姓名（重点）

select s_id,s_name from student where s_id = any(

select sc.s_id from score sc where sc.c_id=(

select c.c_id from course c where c.t_id= 

(select t.t_id from teacher as t where t.t_name='张三'))
)

7、查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名（重点）

select s.s_id, s.s_name from student s where s.s_id= any(

select a.s_id from 

(select s_id from score where c_id='01' )as a inner join 


(select s_id from score where  c_id='02') as b  on a.s_id =b.s_id

)

或者联合表：
 
select s.s_id, s.s_name from student s inner join (

select a.s_id from 

(select s_id from score where c_id='01' )as a inner join 


(select s_id from score where  c_id='02') as b  on a.s_id =b.s_id

)as c on s.s_id = c.s_id


8、查询课程编号为“02”的总成绩（不重点）

select sum(sc.s_score) as total from score as sc where sc.c_id =

(select c.c_id from course as c where c.c_id ='02')


9、查询所有课程成绩小于60分的学生的学号、姓名

select t.s_id,t.s_name from student t inner join 

(select  sc.s_id from score sc where sc.c_id = 

any(select c_id from course) and sc.s_score<60 )as a on t.s_id = a.s_id


10.查询没有学全所有课的学生的学号、姓名(重点)

select t.s_id,t.s_name from student t inner join score sc on t.s_id= sc.s_id group by t.s_id,t.s_name HAVING count(sc.c_id)<(select  count(distinct c_id) from course )


11、查询至少有一门课与学号为“01”的学生所学课程相同的学生的学号和姓名（重点）




select distinct s.s_id, s.s_name from student s inner join score sc on s.s_id=sc.s_id 
where sc.c_id in(select c_id  from score where s_id= '01')  and s.s_id !='01'
 

12.查询和“01”号同学所学课程完全相同的其他同学的学号(重点)

select sc.s_id,st.s_name
from score sc inner join  student st  on  sc.s_id = st.s_id
group by sc.s_id,st.s_name 
HAVING count(sc.c_id) =
(select  count( c_id)  from score where s_id= '01') 
and sc.s_id !='01'

正确逻辑：
select s.s_id from student s where s.s_id in (
select sc.s_id from score sc 
where sc.s_id !='01'
group by sc.s_id
HAVING count(sc.c_id) =
(select  count( c_id)  from score where s_id= '01') 
)
and s.s_id not in (
select DISTINCT s_id from score where c_id not in (select c_id from score where s_id = '01')
)
逻辑思想：
（1）选出所学的课不在（01,02,03）的同学，并排除
（2）剩下的同学肯定选了01,02,03中的某几门，判断所学的课程数是否一样等于3；


13、查询没学过"张三"老师讲授的任一门课程的学生姓名 和47题一样（重点，能做出来）
select s.s_name from student s where s.s_id not in(

select s_id from score where c_id =

(select c_id from course where t_id =

(select t_id from teacher where t_name ='张三')
)
)

15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩（重点）

select s.s_id,s.s_name, avg(sc.s_score) from student s inner join score sc on s.s_id=sc.s_id where sc.s_score <60 GROUP BY s_id  having count(sc.c_id)>=2 


16、检索"01"课程分数小于60，按分数降序排列的学生信息（和34题重复，不重点）


select s.s_id,s.s_name, sc.s_score from student s inner join score sc on s.s_id=sc.s_id

 where sc.c_id ='01' and sc.s_score <60 order by sc.s_score desc


17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩(重重点与35一样)

select sc.s_id, sc.c_id,sc.s_score,a.avg_s_score from score as sc inner join 

(select s_id ,avg(s_score)as avg_s_score  from score GROUP BY s_id )as a on sc.s_id= a.s_id

ORDER BY a.avg_S_score  desc


更优美的格式选择：
select 
s_id '学号'
,
MAX(case when c_id='01' then s_score else null end)'语文',
MAX(case when c_id='02' then s_score else null end)'数学',
MAX(case when c_id='03' then s_score else null end)'英语',

avg(s_score) '平均成绩'

from score GROUP BY s_id 

ORDER BY avg(s_score)  desc


18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率

--及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90 (超级重点)


select 
s.c_id '课程ID'
,c.c_name'课程name'
,max(s.s_score)'最高分'
,min(s.s_score)'最低分'
,avg(s.s_score)'平均分'
,
avg(case when s_score>=60 then 1.0 else 0.0 END)'及格率',
avg(case when s_score>=70 and s_score<80 then 1.0 else 0.0 END)'中等率',
avg(case when s_score>=80  and s_score<90 then 1.0 else 0.0 END)'优良率',
avg(case when s_score>=90 then 1.0 else 0.0 END)'优秀率'
from  score s inner join course  c on s.c_id=c.c_id 
GROUP BY s.c_id

或者用sum+case when :
select 
s.c_id '课程ID'
,c.c_name'课程name'
,max(s.s_score)'最高分'
,min(s.s_score)'最低分'
,avg(s.s_score)'平均分'
,sum(case when s_score>=60 then 1.0 else 0.0 END)/count(s_id)'及格率'
,sum(case when s_score>=70 and s_score<80 then 1.0 else 0.0 END)/count(s_id)'中等率'
,sum(case when s_score>=80  and s_score<90 then 1.0 else 0.0 END)/count(s_id)'优良率'
,sum(case when s_score>=90 then 1.0 else 0.0 END)'优秀率'

from  score s inner join course  c on s.c_id=c.c_id 
GROUP BY s.c_id

19、按各科成绩进行排序，并显示排名(重点row_number)

mysql 8.0：窗口函数
select s_id ,c_id, s_score,
row_rank() over( order by s_score desc) from score
效果一样：
mysql 5.7：
set @rank = 0; #定义一个变量，初始值为1；下面每查询到一个结果，变量+1，并赋值给新的字段名rank_num
select t1.*,@rank:= @rank + 1 as rank_num
from (
    select s_id,c_id,s_score
    from score
	
    order by s_score DESC) as t1
		
20、查询学生的总成绩并进行排名（不重点）

select sc.s_id,sum(sc.s_score) from score sc GROUP BY s_id order by sum(sc.s_score) desc


21 、查询不同老师所教不同课程平均分从高到低显示(不重点)

select t_name,c.c_id,avg(sc.s_score) from teacher t inner join course c on t.t_id=c.t_id  inner join score sc on c.c_id= sc.c_id GROUP BY sc.c_id ORDER BY avg(sc.s_score) desc


22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩（重要 25类似）

select * from (select st.s_id,st.s_name,st.s_birth,st.s_sex,c_id,s_core,row_number() over (partition by c_id order by s_score desc) m from score ac inner join student st on sc.s_id=st.s_id) a
where m in (2,3)

23、使用分段[100-85],[85-70],[70-60],[<60]来统计各科成绩，分别统计各分数段人数：课程ID和课程名称(重点和18题类似)

select 
s.c_id '课程ID'
,c.c_name'课程name'
,max(s.s_score)'最高分'
,min(s.s_score)'最低分'
,avg(s.s_score)'平均分'
,count(case when s_score<60 and s_score>=0 then 1.0 else null  END)'[<60]人数'
,count(case when s_score>=60 and s_score<70 then 1.0 else null END)'[70-60]人数'
,count(case when s_score>=70  and s_score<85 then 1.0 else null END)'[85-70]人数'
,count(case when s_score>=85 then 1.0 else null END)'[100-85]人数'

from  score s inner join course  c on s.c_id=c.c_id 
GROUP BY s.c_id


24、查询学生平均成绩及其名次（同19题，重点）

set @rank = 0; #定义一个变量，初始值为1；下面每查询到一个结果，变量+1，并赋值给新的字段名rank_num
select t1.*,@rank:= @rank + 1 as rank_num
from (
    select s_id,c_id,avg(s_score)
    from score
	  GROUP BY s_id
    order by avg(s_score) DESC) as t1
		
效果一样的窗口函数：
select s_id,avg(s_score), ROW_NUMBER() over (order by avg(s_score) desc) from score GROUP BY s_id


25、查询各科成绩前三名的记录（不考虑成绩并列情况）（重点 与22题类似）

select c_id,s_score 
max(case when m=1 then s_score else null end)'第一',
max(case when m=2 then s-score else null end)'第二',
max(case when m=3 then s_score else null end)'第三'
from
(select s_id,c_id ,ROW_NUMBER() over (partition by c_id order by s_score desc) m) from score)as a 
where m  in (1,2,3)

26、查询每门课程被选修的学生数(不重点)

select c_id, count(s_id) from score GROUP BY c_id

27、查询出只有两门课程的全部学生的学号和姓名(不重点)
select st.s_id, st.s_name from student as st inner join 
(select s_id from score GROUP BY s_id HAVING count(c_id)=2 )as a on st.s_id = a.s_id


28、查询男生、女生人数(不重点)


select s_sex,
count(s_sex)
from student GROUP BY s_sex

29 查询名字中含有"风"字的学生信息（不重点）

select * from student where s_name like '%风%'

31、查询1990年出生的学生名单（重点year）
select * from student where s_birth like '%1990%'

或者：
select  * from student where YEAR(s_birth)='1990'

32、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩（不重要）
select st.s_id,st.s_name ,a.avg_score from student st inner join 

(select sc.s_id,avg(sc.s_score) as avg_score from score sc GROUP BY sc.s_id  HAVING avg(sc.s_score)>85 )as a on st.s_id=a.s_id


33、查询每门课程的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列（不重要）

select c_id,avg(s_score) from score GROUP BY c_id order by avg(s_score) ,c_id asc 


34、查询课程名称为"数学"，且分数低于60的学生姓名和分数（不重点）



select s.s_name,a.s_score from student s inner join 

(select s_id,s_score from score where c_id =(select c_id from course where c_name ='数学') and s_score <60) as a on s.s_id = a.s_id

35、查询所有学生的课程及分数情况（重点）

select sc.s_id ,
max(case when c.c_name = '语文' then sc.s_score else null end)'语文成绩',
max(case when c.c_name = '数学' then sc.s_score else null end)'数学成绩',
max(case when c.c_name = '英语' then sc.s_score else null end)'英语成绩'
 from score sc inner join course c on sc.c_id=c.c_id
 group by sc.s_id


36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数（重点）


select s.s_id,s.s_name,c.c_name,a.s_score from student s inner join 

(select s_id ,c_id, s_score from score where s_score>70  and c_id in (select c_id  from course )) as a

on s.s_id=a.s_id inner join course c on a.c_id =c.c_id


37、查询不及格的课程并按课程号从大到小排列(不重点)
select c.c_name ,a.c_id,a.s_score from course  c inner join 

(select c_id,s_score from score  where s_score <60  )as a on c.c_id =a.c_id order by c_id desc

38、查询课程编号为03且课程成绩在80分以上的学生的学号和姓名（不重要）


select s.s_id, s.s_name from student s inner join 
(select s_id from score where c_id='03' and s_score >80) as a on s.s_id=a.s_id

39、求每门课程的学生人数（不重要）

select c_id,count(c_id) from score  GROUP BY c_id

40、查询选修“张三”老师所授课程的学生中成绩最高的学生姓名及其成绩（重要top）

select s.s_name, a.s_score from student s inner join 
(
select s_id, s_score from score  where c_id =(

select c_id from course where t_id =(

select t_id from teacher where t_name='张三') 
)
)as a on s.s_id=a.s_id order by a.s_score desc limit 1

41.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 （重点）




select distinct sc1.s_id,sc1.c_id,sc1.s_score  from score sc1 inner join  score sc2 on sc1.s_id=sc2.s_id  where sc1.s_score=sc2.s_score and sc1.c_id !=sc2.c_id GROUP BY sc1.c_id



42、查询每门功成绩最好的前两名（同22和25题）
不完全正确：
select s_id ,c_id ,s_score,
(case when c_id='01' then s_score end)'语文',
(case when c_id='02' then s_score end)'数学',
(case when c_id='03' then s_score end)'英语'
from score order by s_score desc 


(select s_id ,c_id ,s_score from score where c_id='01' order by s_score desc limit 2) 
(select s_id ,c_id ,s_score from score where c_id='02' order by s_score desc limit 2)
(select s_id ,c_id ,s_score from score where c_id='03' order by s_score desc limit 2)

43、统计每门课程的学生选修人数（超过人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）


select 
count(case when c_id='01' then (s_score) end)'语文',
count(case when c_id='02' then (s_score) end)'数学',
count(case when c_id='03' then (s_score) end)'英语'

from score 


select c_id ,count(c_id) ,
count(case when c_id='01' then (s_score) end)'语文',
count(case when c_id='02' then (s_score) end)'数学',
count(case when c_id='03' then (s_score) end)'英语'


from score  GROUP BY c_id HAVING count(c_id)>5 order by count(c_id) desc,c_id

44、检索至少选修两门课程的学生学号（不重要）


select s_id,count(c_id)as '选修数量' from score GROUP BY s_id HAVING count(c_id)>=2 


45、 查询选修了全部课程的学生信息（重点划红线地方）


select s_id,count(c_id) from score  GROUP BY s_id HAVING  count(c_id)=(select count(c_id) from course)
47、查询没学过“张三”老师讲授的任一门课程的学生姓名（还可以，自己写的，答案中没有）

select s.s_id, s.s_name,c.c_name from student s inner join (

select sc.s_id,b.c_name from score sc inner join(

select c_id,c_name from course c inner join  (

select t_id from teacher where t_name ='张三')as a on c.t_id=a.t_id
) as b on sc.c_id=b.c_id
)as c on s.s_id= c.s_id

48、查询两门以上不及格课程的同学的学号及其平均成绩（还可以，自己写的，答案中没有）


select  a.s_id , a.avg_score from 

(select s_id ,avg (s_score)as avg_score from score GROUP BY s_id HAVING  count(c_id)>2 )as a inner join 


(select distinct s_id,avg (s_score) from score where s_score <60)as b on a.s_id= b.s_id

或：
select s_id ,avg(s_score) from score where s_score <60 group by s_id HAVING count(c_id)>2 

49、查询各学生的年龄（精确到月份）
select s.s_id,s.s_name,TIMESTAMPDIFF(YEAR,s.s_birth,CURDATE())  from student s


50.查询本周过生日的学生

select* from student where 
week(s_birth,1)=week(date(now()),1)
下周：
select* from student where 
week(s_birth,1)=week(date(now()),1)+1


51.查询本月过生日的学生

select* from student where 
month(s_birth)=month(date(now()))
下月：

select* from student where 
month(s_birth)=month(date(now()))+1








